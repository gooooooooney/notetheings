//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
    provider = "postgresql"
    url = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator zod {
    provider = "zod-prisma"
    output = "./zod"
    relationModel = true
    modelCase = "camelCase"
    modelSuffix = "Schema"
    useDecimalJs = true
    prismaJsonNullability = true
}

enum PageType {
    Page
    Folder
    File
}

enum BlockType {
    Heading
    Text
    Todo
    Image
    Video
    Audio
    File
    Table
    Code
    Embed
    Collection
    Bookmark
    Divider
    Equation
    Callout
    Page
    TableOfContents
    Mention
    Inline
    EquationBlock
}

/// @@allow('create,read', true)
/// @@allow('update,delete', auth() == this)
model User {
    id String @id() @default(uuid())
    username String @unique()
    imageUrl String @db.Text()
    email String @unique()
    /// @password
    /// @omit
    password String
    externalUserId String @unique()
    workspaces Workspace[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}

model Workspace {
    id String @id() @default(uuid())
    ownerId String
    owner User @relation(fields: [ownerId], references: [id])
    name String
    logo String?
    pages Page[]
    isActive Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deleted Boolean @default(false)
}

model Page {
    id String @id() @default(uuid())
    workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
    workspaceId String
    blocks Block[]
    type PageType @default(Page)
    name String?
    icon String?
    coverSrc String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
    deleted Boolean @default(false)
}

model Block {
    id Int @id() @default(autoincrement())
    type BlockType @default(Text)
    content Json
    pageId String
    page Page @relation(fields: [pageId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt()
}